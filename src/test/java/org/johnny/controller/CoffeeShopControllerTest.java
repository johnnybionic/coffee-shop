package org.johnny.controller;

import org.johnny.CoffeeShopApplication;
import org.johnny.domain.Order;
import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.SpringApplicationConfiguration;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.context.web.WebAppConfiguration;

import javax.servlet.http.HttpServletRequest;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;

import static org.junit.Assert.*;

/**
 * Basic tests for the CoffeeShopController. In the presentation, these were done with Spock.
 *
 * An issue with the tests is that they require a running instance of MongoDB, which cannot be guaranteed if building anywhere other than local. T
 *
 * I've started to enhance the project by adding an embedded database.
 *
 * Created by johnny on 17/07/2016.
 */
@ActiveProfiles({"junit"})
@RunWith(SpringJUnit4ClassRunner.class)
@SpringApplicationConfiguration(CoffeeShopApplication.class)
@WebAppConfiguration
public class CoffeeShopControllerTest {

    private static final Long COFFEE_SHOP_ID = 1L;
    private static final String ORDER_ID = "5790b622e7538bad96a25c97";
    private static final String DB_NAME = "johnny-coffee";
    private static final Double LATITUDE = 51.5357461d;
    private static final Double LONGITUDE = -0.125133d;
    private static final String REQUEST_URI = "/coffeeshop/1/order/42";

    @Autowired
    private CoffeeShopController controller;

    @Before
    public void setUp() {
    }

    @Test
    public void thatResponseIsReturnedForSuccess() {
        Order order = new Order();

        try {
            ResponseEntity entity = controller.saveOrder(COFFEE_SHOP_ID, order);

            assertNotNull(entity);
            assertNotNull(entity.getBody());
            assertNotNull(entity.getHeaders().getLocation());

            assertTrue(entity.getStatusCode().equals(HttpStatus.CREATED));
            URI location = entity.getHeaders().getLocation();

            assertTrue(entity.getBody() == order);
            // an ID is generated by the save
            assertNotNull(order.getId());

        } catch (URISyntaxException e) {
            fail();
        }
    }

    /*
    This assumes that there is an order in the database with this ID - so would require either having a local database that has test
    data always available, or an embedded DB that gets loaded when the tests run - or a fake.
     */
    @Test
    @Ignore
    public void thatOrderIsRetrieved() throws URISyntaxException {
        MockHttpServletRequest request = new MockHttpServletRequest();
        request.setRequestURI(REQUEST_URI);
        String url = request.getRequestURL().toString();

        ResponseEntity<Order> order = controller.getOrder(COFFEE_SHOP_ID, ORDER_ID, request);

        assertEquals(url, order.getHeaders().getLocation().toString());
        Order body = order.getBody();
        assertEquals(ORDER_ID, body.getId());
    }

    /**
     * Caravan in King's Cross
     *
     * latitude is 51.5357461
     * longitude is  -0.125133
     *
     * {location: {$near: {$geometry: {type:'Point', coordinates:[-0.125133,51.5357461]},$maxDistance:100}}}
     *
     * OSM data is slightly out, but will find within 100m
     *
     * Again, requires data to be available (either lcoal DB or embedded DB)
     *
     */
    @Ignore
    @Test
    public void thatNearestCoffeeShopIsFound() {

        ResponseEntity<String> nearest = controller.getNearest(LATITUDE, LONGITUDE);
        String body = nearest.getBody();
        assertNotNull(body);
    }
}
